"use client"

import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Download,
  Copy,
  Check,
  X,
  Eye,
  Code,
  FileText,
  Github,
  ArrowLeft,
  Settings,
  RefreshCw,
  AlertCircle,
  Maximize2,
  Minimize2,
  Share2,
  BookOpen,
  ExternalLink,
  Clock,
  Hash,
  Layers,
  BarChart3
} from 'lucide-react';
import { Button } from '@/components/ui/button';

interface ModernReadmeOutputProps {
  content: string;
  repositoryUrl?: string;
  projectName?: string;
  generationParams?: any;
  onClose?: () => void;
  onEdit?: () => void;
}

export default function ModernReadmeOutput({
  content,
  repositoryUrl,
  projectName,
  generationParams,
  onClose,
  onEdit
}: ModernReadmeOutputProps) {
  const [viewMode, setViewMode] = useState<'preview' | 'raw' | 'split'>('preview');
  const [copySuccess, setCopySuccess] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [saveError, setSaveError] = useState('');
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showStats, setShowStats] = useState(false);
  const [processedContent, setProcessedContent] = useState('');
  const [isClient, setIsClient] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [fontSize, setFontSize] = useState(16);
  const [theme, setTheme] = useState<'dark' | 'github' | 'minimal'>('dark');

  const contentRef = useRef<HTMLDivElement>(null);

  // Client-side initialization
  useEffect(() => {
    setIsClient(true);

    const processContent = async () => {
      try {
        const { marked } = await import('marked');
        const DOMPurify = (await import('isomorphic-dompurify')).default;

        const processed = marked(content) as string;
        const sanitized = DOMPurify.sanitize(processed);
        setProcessedContent(sanitized);
      } catch (error) {
        console.error('Error processing content:', error);
        setProcessedContent('<p>Error processing content</p>');
      }
    };

    if (content) {
      processContent();
    }
  }, [content]);

  // Calculate content stats
  const contentStats = {
    characters: content.length,
    words: content.split(/\s+/).filter(word => word.length > 0).length,
    lines: content.split('\n').length,
    sections: (content.match(/^#+\s/gm) || []).length,
    codeBlocks: (content.match(/```/g) || []).length / 2,
    links: (content.match(/\[.*?\]\(.*?\)/g) || []).length
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(content);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const handleDownload = () => {
    setIsDownloading(true);

    setTimeout(() => {
      const blob = new Blob([content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${projectName || 'README'}.md`;
      a.click();
      URL.revokeObjectURL(url);
      setIsDownloading(false);
    }, 800);
  };

  const handleSaveToGitHub = async () => {
    if (!repositoryUrl) {
      setSaveError('Repository URL is required');
      return;
    }

    setIsSaving(true);
    setSaveError('');

    try {
      const response = await fetch('/api/save-readme', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          repositoryUrl,
          readmeContent: content
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to save README');
      }

      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 3000);

    } catch (error) {
      console.error('Error saving README:', error);
      setSaveError(error instanceof Error ? error.message : 'Failed to save README');
      setTimeout(() => setSaveError(''), 5000);
    } finally {
      setIsSaving(false);
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `${projectName || 'README'} - Generated by AutoDoc AI`,
          text: 'Check out this AI-generated README!',
          url: window.location.href
        });
      } catch (err) {
        console.log('Share cancelled');
      }
    } else {
      // Fallback to copying URL
      try {
        await navigator.clipboard.writeText(window.location.href);
        // Could show a toast here
      } catch (err) {
        console.error('Failed to copy URL');
      }
    }
  };

  if (!isClient) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 text-white flex items-center justify-center">
        <div className="flex flex-col items-center gap-4">
          <div className="relative">
            <div className="w-12 h-12 border-4 border-green-400/30 border-t-green-400 rounded-full animate-spin"></div>
            <div className="absolute inset-0 w-12 h-12 border-4 border-transparent border-r-green-400/50 rounded-full animate-spin animate-reverse"></div>
          </div>
          <div className="text-center">
            <h3 className="text-lg font-semibold text-green-400 mb-1">Loading README</h3>
            <p className="text-gray-400 text-sm">Preparing your documentation...</p>
          </div>
        </div>
      </div>
    );
  }

  const themeClasses = {
    dark: 'bg-gradient-to-br from-gray-900 via-black to-gray-900 text-white',
    github: 'bg-white text-gray-900',
    minimal: 'bg-gray-50 text-gray-800'
  };

  return (
    <div className={`min-h-screen ${themeClasses[theme]} relative transition-all duration-500`}>
      {/* Animated Background */}
      <div className="fixed inset-0 z-0 overflow-hidden">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_20%_80%,rgba(0,255,136,0.15),transparent_50%)]" />
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_80%_20%,rgba(59,130,246,0.1),transparent_50%)]" />
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_40%_40%,rgba(168,85,247,0.08),transparent_50%)]" />

        {/* Floating particles */}
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-green-400/30 rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              y: [0, -30, 0],
              opacity: [0.3, 0.8, 0.3],
              scale: [1, 1.2, 1],
            }}
            transition={{
              duration: 3 + Math.random() * 2,
              repeat: Infinity,
              delay: Math.random() * 2,
            }}
          />
        ))}
      </div>

      {/* Header */}
      <motion.header
        className={`sticky top-0 z-50 backdrop-blur-2xl border-b transition-all duration-300 ${isFullscreen ? 'bg-black/95 border-green-400/30' : 'bg-black/80 border-green-400/20'
          }`}
        initial={{ y: -100, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.6, type: "spring", stiffness: 100 }}
      >
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            {/* Left Section */}
            <div className="flex items-center gap-6">
              <motion.button
                onClick={onClose || (() => window.history.back())}
                className="group flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-400 hover:text-green-400 transition-all duration-300 rounded-xl hover:bg-green-400/10 border border-transparent hover:border-green-400/30"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <ArrowLeft className="w-4 h-4 transition-transform group-hover:-translate-x-1" />
                <span className="hidden sm:inline">Back</span>
              </motion.button>

              <div className="flex items-center gap-4">
                <motion.div
                  className="relative p-3 bg-gradient-to-br from-green-400/20 to-green-600/20 rounded-xl border border-green-400/30"
                  whileHover={{ scale: 1.05 }}
                  animate={{
                    boxShadow: [
                      '0 0 20px rgba(0, 255, 136, 0.3)',
                      '0 0 30px rgba(0, 255, 136, 0.5)',
                      '0 0 20px rgba(0, 255, 136, 0.3)'
                    ]
                  }}
                  transition={{ duration: 2, repeat: Infinity }}
                >
                  <FileText className="w-6 h-6 text-green-400" />
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse" />
                </motion.div>

                <div>
                  <h1 className="text-xl font-bold bg-gradient-to-r from-white to-green-400 bg-clip-text text-transparent">
                    {projectName || 'README Generated'}
                  </h1>
                  <div className="flex items-center gap-2 text-xs text-gray-400">
                    <Clock className="w-3 h-3" />
                    <span>Generated {new Date().toLocaleTimeString()}</span>
                    <span className="w-1 h-1 bg-gray-400 rounded-full" />
                    <span>{contentStats.words} words</span>
                  </div>
                </div>
              </div>

              {/* View Mode Toggle */}
              <div className="flex items-center bg-gray-900/50 backdrop-blur-sm rounded-xl p-1 border border-green-400/20">
                {[
                  { mode: 'preview', icon: Eye, label: 'Preview' },
                  { mode: 'raw', icon: Code, label: 'Raw' },
                  { mode: 'split', icon: Layers, label: 'Split' }
                ].map(({ mode, icon: Icon, label }) => (
                  <motion.button
                    key={mode}
                    onClick={() => setViewMode(mode as any)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all ${viewMode === mode
                        ? 'bg-green-400 text-black shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-white/5'
                      }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Icon className="w-4 h-4" />
                    <span className="hidden md:inline">{label}</span>
                  </motion.button>
                ))}
              </div>
            </div>

            {/* Right Section - Actions */}
            <div className="flex items-center gap-2">
              {/* Stats Button */}
              <motion.button
                onClick={() => setShowStats(!showStats)}
                className="p-2 text-gray-400 hover:text-green-400 hover:bg-green-400/10 rounded-lg transition-all"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <BarChart3 className="w-4 h-4" />
              </motion.button>

              {/* Share Button */}
              <motion.button
                onClick={handleShare}
                className="p-2 text-gray-400 hover:text-blue-400 hover:bg-blue-400/10 rounded-lg transition-all"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <Share2 className="w-4 h-4" />
              </motion.button>

              {/* Copy Button */}
              <Button
                onClick={handleCopy}
                variant="ghost"
                size="sm"
                className={`transition-all duration-300 ${copySuccess
                    ? 'bg-green-500/20 text-green-400 border-green-400/50'
                    : 'bg-gray-900/50 hover:bg-green-400/10 text-gray-300 hover:text-green-400 border-green-400/20'
                  } border backdrop-blur-sm`}
              >
                <motion.div
                  className="flex items-center gap-2"
                  animate={copySuccess ? { scale: [1, 1.1, 1] } : {}}
                >
                  {copySuccess ? (
                    <Check className="w-4 h-4" />
                  ) : (
                    <Copy className="w-4 h-4" />
                  )}
                  <span>{copySuccess ? 'Copied!' : 'Copy'}</span>
                </motion.div>
              </Button>

              {/* GitHub Save Button */}
              {repositoryUrl && (
                <Button
                  onClick={handleSaveToGitHub}
                  disabled={isSaving}
                  size="sm"
                  className="bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 border-0 shadow-lg"
                >
                  <motion.div
                    className="flex items-center gap-2"
                    animate={isSaving ? { rotate: 360 } : {}}
                    transition={{ duration: 1, repeat: isSaving ? Infinity : 0 }}
                  >
                    {isSaving ? (
                      <RefreshCw className="w-4 h-4" />
                    ) : saveSuccess ? (
                      <Check className="w-4 h-4" />
                    ) : (
                      <Github className="w-4 h-4" />
                    )}
                    <span>
                      {isSaving ? 'Saving...' : saveSuccess ? 'Saved!' : 'Save to GitHub'}
                    </span>
                  </motion.div>
                </Button>
              )}

              {/* Download Button */}
              <Button
                onClick={handleDownload}
                disabled={isDownloading}
                size="sm"
                className="bg-gradient-to-r from-green-500 to-green-600 text-black hover:from-green-400 hover:to-green-500 border-0 shadow-lg font-semibold"
              >
                <motion.div
                  className="flex items-center gap-2"
                  animate={isDownloading ? { y: [0, -2, 0] } : {}}
                  transition={{ duration: 0.5, repeat: isDownloading ? Infinity : 0 }}
                >
                  {isDownloading ? (
                    <RefreshCw className="w-4 h-4 animate-spin" />
                  ) : (
                    <Download className="w-4 h-4" />
                  )}
                  <span>{isDownloading ? 'Downloading...' : 'Download'}</span>
                </motion.div>
              </Button>

              {/* Fullscreen Toggle */}
              <motion.button
                onClick={() => setIsFullscreen(!isFullscreen)}
                className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-all"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                {isFullscreen ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
              </motion.button>

              {/* Settings Button */}
              <motion.button
                onClick={() => setShowSettings(!showSettings)}
                className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-all"
                whileHover={{ scale: 1.1, rotate: 90 }}
                whileTap={{ scale: 0.9 }}
              >
                <Settings className="w-4 h-4" />
              </motion.button>
            </div>
          </div>
        </div>
      </motion.header>

      {/* Stats Panel */}
      <AnimatePresence>
        {showStats && (
          <motion.div
            className="fixed top-20 left-6 w-80 bg-black/90 backdrop-blur-xl border border-green-400/20 rounded-2xl p-6 z-60 shadow-2xl"
            initial={{ opacity: 0, scale: 0.9, x: -20 }}
            animate={{ opacity: 1, scale: 1, x: 0 }}
            exit={{ opacity: 0, scale: 0.9, x: -20 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-green-400" />
                <h3 className="font-semibold text-green-400">Content Statistics</h3>
              </div>
              <button
                onClick={() => setShowStats(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            <div className="grid grid-cols-2 gap-4">
              {[
                { label: 'Characters', value: contentStats.characters.toLocaleString(), icon: Hash },
                { label: 'Words', value: contentStats.words.toLocaleString(), icon: BookOpen },
                { label: 'Lines', value: contentStats.lines.toLocaleString(), icon: Layers },
                { label: 'Sections', value: contentStats.sections.toString(), icon: FileText },
                { label: 'Code Blocks', value: Math.floor(contentStats.codeBlocks).toString(), icon: Code },
                { label: 'Links', value: contentStats.links.toString(), icon: ExternalLink }
              ].map(({ label, value, icon: Icon }, index) => (
                <motion.div
                  key={label}
                  className="bg-gray-800/50 rounded-lg p-3 border border-gray-700/50"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <div className="flex items-center gap-2 mb-1">
                    <Icon className="w-4 h-4 text-gray-400" />
                    <span className="text-xs text-gray-400">{label}</span>
                  </div>
                  <div className="text-lg font-bold text-white">{value}</div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Main Content */}
      <main className={`relative z-10 transition-all duration-300 ${isFullscreen ? 'px-0 py-0' : 'px-6 py-8'}`}>
        <div className={`mx-auto transition-all duration-300 ${isFullscreen ? 'max-w-none' : 'container max-w-7xl'}`}>
          <motion.div
            className="relative"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, type: "spring", stiffness: 100 }}
          >
            {/* Content Container */}
            <div className={`relative bg-black/40 backdrop-blur-xl border border-green-400/20 overflow-hidden transition-all duration-300 ${isFullscreen ? 'rounded-none min-h-screen' : 'rounded-2xl'
              }`}>
              {/* Content Header */}
              <div className="flex items-center justify-between p-6 border-b border-green-400/20 bg-gradient-to-r from-transparent via-green-400/5 to-transparent">
                <div className="flex items-center gap-3">
                  {viewMode === 'preview' ? (
                    <>
                      <Eye className="w-5 h-5 text-green-400" />
                      <span className="font-medium text-green-400">README Preview</span>
                    </>
                  ) : viewMode === 'raw' ? (
                    <>
                      <Code className="w-5 h-5 text-purple-400" />
                      <span className="font-medium text-purple-400">Markdown Source</span>
                    </>
                  ) : (
                    <>
                      <Layers className="w-5 h-5 text-blue-400" />
                      <span className="font-medium text-blue-400">Split View</span>
                    </>
                  )}
                </div>

                {/* Content Stats */}
                <div className="flex items-center gap-4 text-sm text-gray-400">
                  <div className="flex items-center gap-1">
                    <Hash className="w-3 h-3" />
                    <span>{contentStats.words} words</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Layers className="w-3 h-3" />
                    <span>{contentStats.sections} sections</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Code className="w-3 h-3" />
                    <span>{Math.floor(contentStats.codeBlocks)} code blocks</span>
                  </div>
                </div>
              </div>

              {/* Content Area */}
              <div
                ref={contentRef}
                className={`overflow-y-auto transition-all duration-300 ${isFullscreen ? 'h-[calc(100vh-140px)]' : 'max-h-[calc(100vh-300px)]'
                  }`}
                style={{
                  scrollbarWidth: 'thin',
                  scrollbarColor: 'rgba(0, 255, 136, 0.6) rgba(0, 0, 0, 0.3)',
                  fontSize: `${fontSize}px`
                }}
              >
                <AnimatePresence mode="wait">
                  {viewMode === 'preview' ? (
                    <motion.div
                      key="preview"
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: 20 }}
                      transition={{ duration: 0.4, type: "spring" }}
                      className="p-8"
                    >
                      <div
                        className={`prose max-w-none transition-all duration-300 ${theme === 'dark' ? 'prose-invert prose-green' : 'prose-gray'
                          }`}
                        dangerouslySetInnerHTML={{ __html: processedContent }}
                        style={{
                          lineHeight: '1.7',
                          color: theme === 'dark' ? '#e5e7eb' : '#374151'
                        }}
                      />
                    </motion.div>
                  ) : viewMode === 'raw' ? (
                    <motion.div
                      key="raw"
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -20 }}
                      transition={{ duration: 0.4, type: "spring" }}
                      className="p-8"
                    >
                      <pre className={`font-mono text-sm whitespace-pre-wrap leading-relaxed rounded-lg p-6 border transition-all duration-300 ${theme === 'dark'
                          ? 'text-gray-300 bg-gray-900/30 border-gray-700/50'
                          : 'text-gray-700 bg-gray-100 border-gray-300'
                        }`}>
                        {content}
                      </pre>
                    </motion.div>
                  ) : (
                    <motion.div
                      key="split"
                      initial={{ opacity: 0, scale: 0.95 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 1.05 }}
                      transition={{ duration: 0.4, type: "spring" }}
                      className="flex h-full"
                    >
                      {/* Raw Side */}
                      <div className="w-1/2 border-r border-green-400/20">
                        <div className="p-6">
                          <div className="flex items-center gap-2 mb-4">
                            <Code className="w-4 h-4 text-purple-400" />
                            <span className="text-sm font-medium text-purple-400">Source</span>
                          </div>
                          <pre className={`font-mono text-xs whitespace-pre-wrap leading-relaxed rounded-lg p-4 border max-h-full overflow-auto transition-all duration-300 ${theme === 'dark'
                              ? 'text-gray-300 bg-gray-900/30 border-gray-700/50'
                              : 'text-gray-700 bg-gray-100 border-gray-300'
                            }`}>
                            {content}
                          </pre>
                        </div>
                      </div>

                      {/* Preview Side */}
                      <div className="w-1/2">
                        <div className="p-6">
                          <div className="flex items-center gap-2 mb-4">
                            <Eye className="w-4 h-4 text-green-400" />
                            <span className="text-sm font-medium text-green-400">Preview</span>
                          </div>
                          <div
                            className={`prose prose-sm max-w-none ${theme === 'dark' ? 'prose-invert prose-green' : 'prose-gray'
                              }`}
                            dangerouslySetInnerHTML={{ __html: processedContent }}
                            style={{
                              lineHeight: '1.6',
                              color: theme === 'dark' ? '#e5e7eb' : '#374151'
                            }}
                          />
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </div>
          </motion.div>
        </div>
      </main>

      {/* Settings Panel */}
      <AnimatePresence>
        {showSettings && (
          <motion.div
            className="fixed top-20 right-6 w-80 bg-black/90 backdrop-blur-xl border border-green-400/20 rounded-2xl p-6 z-60 shadow-2xl"
            initial={{ opacity: 0, scale: 0.9, x: 20 }}
            animate={{ opacity: 1, scale: 1, x: 0 }}
            exit={{ opacity: 0, scale: 0.9, x: 20 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-2">
                <Settings className="w-5 h-5 text-green-400" />
                <h3 className="font-semibold text-green-400">Display Settings</h3>
              </div>
              <button
                onClick={() => setShowSettings(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            <div className="space-y-6">
              {/* Font Size */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-3">Font Size</label>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setFontSize(Math.max(12, fontSize - 2))}
                    className="p-2 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors"
                  >
                    <Minimize2 className="w-4 h-4" />
                  </button>
                  <span className="text-sm text-gray-400 min-w-[3rem] text-center">{fontSize}px</span>
                  <button
                    onClick={() => setFontSize(Math.min(24, fontSize + 2))}
                    className="p-2 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors"
                  >
                    <Maximize2 className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Theme */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-3">Theme</label>
                <div className="grid grid-cols-2 gap-2">
                  {[
                    { value: 'dark', label: 'Dark Mode', color: 'bg-gray-900' },
                    { value: 'github', label: 'Light Mode', color: 'bg-white' }
                  ].map(({ value, label, color }) => (
                    <button
                      key={value}
                      onClick={() => setTheme(value as any)}
                      className={`p-3 rounded-lg border transition-all ${theme === value
                          ? 'border-green-400 bg-green-400/10 text-green-400'
                          : 'border-gray-600 text-gray-400 hover:border-gray-500'
                        }`}
                    >
                      <div className={`w-4 h-4 ${color} rounded mx-auto mb-1 border border-gray-600`} />
                      <div className="text-xs">{label}</div>
                    </button>
                  ))}
                </div>
              </div>


            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Success/Error Messages */}
      <AnimatePresence>
        {(saveError || saveSuccess) && (
          <motion.div
            className={`fixed bottom-6 left-6 right-6 max-w-md mx-auto backdrop-blur-xl border rounded-2xl p-4 z-70 ${saveError
                ? 'bg-red-900/80 border-red-400/20'
                : 'bg-green-900/80 border-green-400/20'
              }`}
            initial={{ opacity: 0, y: 50, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 50, scale: 0.9 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <div className={`flex items-center gap-3 text-sm ${saveError ? 'text-red-400' : 'text-green-400'
              }`}>
              {saveError ? (
                <AlertCircle className="w-5 h-5 flex-shrink-0" />
              ) : (
                <Check className="w-5 h-5 flex-shrink-0" />
              )}
              <span className="flex-1">{saveError || 'README saved successfully to GitHub!'}</span>
              <button
                onClick={() => {
                  setSaveError('');
                  setSaveSuccess(false);
                }}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}